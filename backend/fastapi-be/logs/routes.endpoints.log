[2025-06-29 13:46:18] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-29 13:47:02] [INFO] [routes.endpoints] Successfully extracted 9 endpoints.
[2025-06-29 13:47:02] [ERROR] [routes.endpoints] Error processing /get-endpoints: 'branch'
[2025-06-29 13:49:23] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-29 13:49:40] [INFO] [routes.endpoints] Successfully extracted 9 endpoints.
[2025-06-29 13:50:39] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 9, 'group_count': {'Items': 6, 'Login': 4, 'Users': 10, 'Utils': 1, 'Test_items': 10, 'Test_login': 7, 'Test_private': 1, 'Test_users': 24, 'Test_user': 4}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id'], 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id', 'item_in'], 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id'], 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'read_items', 'file': 'backend/app/api/routes/items.py', 'params': ['skip', 'limit'], 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[ItemPublic]', 'count': 'int'}}}}, {'path': '/items/', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': ['item_in'], 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}, {'path': '/items/', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': ['item_in'], 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend/app/api/routes/login.py', 'params': [], 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend/app/api/routes/login.py', 'params': ['email'], 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend/app/api/routes/login.py', 'params': ['body'], 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend/app/api/routes/login.py', 'params': ['email'], 'responses': {'200': {'description': 'HTML content for password recovery', 'content_type': 'text/html', 'response': {'content': 'string', 'subject': 'string'}}}}], 'Users': [{'path': '/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'read_users', 'file': 'backend/app/api/routes/users.py', 'params': ['skip', 'limit'], 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[UserPublic]', 'count': 'int'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id'], 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}, '403': {'description': "User doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id', 'user_in'], 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id'], 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/api/routes/users.py', 'params': ['body'], 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend/app/api/routes/utils.py', 'params': [], 'responses': {'200': {'description': 'Health check passed', 'content_type': 'application/json', 'response': {'result': 'bool'}}}}], 'Test_items': [{'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'int', 'title': 'string', 'description': 'string', 'owner_id': 'int'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_enough_permissions', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'test_read_items', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'data': {'id': 'int', 'title': 'string', 'description': 'string', 'owner_id': 'int'}}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'id': 'int', 'title': 'string', 'description': 'string', 'owner_id': 'int'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_enough_permissions', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'200': {'description': 'Item deleted successfully', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_enough_permissions', 'file': 'backend\\app\\tests\\api\\routes\\test_items.py', 'params': ['item_id'], 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_login': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token_incorrect_password', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': [], 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_use_access_token', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': ['email'], 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password_user_not_exits', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': ['email'], 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': [], 'responses': {'200': {'description': 'Password updated successfully', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password_invalid_token', 'file': 'backend\\app\\tests\\api\\routes\\test_login.py', 'params': [], 'responses': {'400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'test_create_user', 'file': 'backend\\app\\tests\\api\\routes\\test_private.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}], 'Test_users': [{'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_superuser_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_normal_user_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_new_email', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_current_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_permissions_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_existing_username', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'400': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_by_normal_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'403': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'test_retrieve_users', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'data': {'id': 'int', 'email': 'string', 'full_name': 'string'}, 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'Successful response', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'Password updated successfully', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me_incorrect_password', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me_email_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['email', 'password', 'full_name'], 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user_already_exists_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['email', 'password', 'full_name'], 'responses': {'400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'full_name'], 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'full_name': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_not_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'full_name'], 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_email_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'email'], 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me_as_superuser', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_super_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_current_super_user_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_without_privileges', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_user': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_authenticate_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': ['username', 'password'], 'responses': {'200': {'description': 'User authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_not_authenticate_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': ['username', 'password'], 'responses': {'200': {'description': 'User not authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': ['user_id'], 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': ['user_id', 'password', 'is_superuser'], 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}]}}
[2025-06-29 13:50:39] [INFO] [routes.endpoints] Endpoints saved successfully with ID: 6860f7577a7b40b8e61e796c
[2025-06-29 20:37:02] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-29 20:37:28] [INFO] [routes.endpoints] Successfully extracted 6 endpoints.
[2025-06-29 20:38:10] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-29 20:38:43] [INFO] [routes.endpoints] Successfully extracted 10 endpoints.
[2025-06-29 20:41:21] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-29 20:41:37] [INFO] [routes.endpoints] Successfully extracted 10 endpoints.
[2025-06-29 20:42:23] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 10, 'group_count': {'Items': 5, 'Login': 5, 'Users': 10, 'Utils': 2, 'Test_items': 10, 'Test_login': 7, 'Test_private': 1, 'Test_users': 24, 'User': 2, 'Mailcatcher': 2}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id'], 'summary': 'Get item by ID.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id', 'item_in'], 'summary': 'Update an item.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id'], 'summary': 'Delete an item.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items', 'method': 'GET', 'handler': 'read_items', 'file': 'backend/app/api/routes/items.py', 'params': ['skip', 'limit'], 'summary': 'Retrieve items.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[ItemPublic]', 'count': 'int'}}}}, {'path': '/items', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': ['item_in'], 'summary': 'Create new item.', 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Test access token.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend/app/api/routes/login.py', 'params': ['email'], 'summary': 'Password Recovery.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend/app/api/routes/login.py', 'params': ['body'], 'summary': 'Reset password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend/app/api/routes/login.py', 'params': ['email'], 'summary': 'HTML Content for Password Recovery.', 'responses': {'200': {'description': 'HTML Content for Password Recovery.', 'content_type': 'text/html', 'response': {'content': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'login_access_token', 'file': 'backend/app/api/routes/login.py', 'params': ['form_data'], 'summary': 'OAuth2 compatible token login, get an access token for future requests', 'responses': {'200': {'description': 'Access token', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}], 'Users': [{'path': '/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'summary': 'Create new user without the need to be logged in.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id'], 'summary': 'Get a specific user by id.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}, '403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id', 'user_in'], 'summary': 'Update a user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}, '404': {'description': 'The user with this id does not exist in the system', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id'], 'summary': 'Delete a user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users', 'method': 'GET', 'handler': 'read_users', 'file': 'backend/app/api/routes/users.py', 'params': ['skip', 'limit'], 'summary': 'Retrieve users.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[UserPublic]', 'count': 'int'}}}}, {'path': '/users', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'summary': 'Create new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Get current user.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'summary': 'Update own user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/api/routes/users.py', 'params': ['body'], 'summary': 'Update own password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Delete own user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend/app/api/routes/utils.py', 'params': [], 'summary': 'Health check.', 'responses': {'200': {'description': 'Health check successful', 'content_type': 'application/json', 'response': {'result': 'bool'}}}}, {'path': '/test-email/{email_to}', 'method': 'GET', 'handler': 'test_email', 'file': 'backend/app/api/routes/utils.py', 'params': ['email_to'], 'summary': 'Test emails.', 'responses': {'200': {'description': 'Test email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}], 'Test_items': [{'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API reads an item by id', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_found', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API reads an item by id, but the item is not found', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_enough_permissions', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API reads an item by id, but the user does not have enough permissions', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'test_read_items', 'file': 'test_items.py', 'params': [], 'summary': 'This API reads all items', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API updates an item by id', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_found', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API updates an item by id, but the item is not found', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_enough_permissions', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API updates an item by id, but the user does not have enough permissions', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API deletes an item by id', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_found', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API deletes an item by id, but the item is not found', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_enough_permissions', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API deletes an item by id, but the user does not have enough permissions', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_login': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token', 'file': 'test_login.py', 'params': [], 'summary': 'This API gets an access token', 'responses': {'200': {'description': 'Access token obtained', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token_incorrect_password', 'file': 'test_login.py', 'params': [], 'summary': 'This API gets an access token with incorrect password', 'responses': {'400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_use_access_token', 'file': 'test_login.py', 'params': [], 'summary': 'This API tests an access token', 'responses': {'200': {'description': 'Access token tested', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password', 'file': 'test_login.py', 'params': ['email'], 'summary': 'This API recovers a password', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password_user_not_exits', 'file': 'test_login.py', 'params': ['email'], 'summary': 'This API recovers a password for a user that does not exist', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password', 'file': 'test_login.py', 'params': [], 'summary': 'This API resets a password', 'responses': {'200': {'description': 'Password reset', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password_invalid_token', 'file': 'test_login.py', 'params': [], 'summary': 'This API resets a password with an invalid token', 'responses': {'400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'test_create_user', 'file': 'test_private.py', 'params': [], 'summary': 'This API creates a user', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}], 'Test_users': [{'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_superuser_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API gets the current user for a superuser', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_normal_user_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API gets the current user for a normal user', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_new_email', 'file': 'test_users.py', 'params': [], 'summary': 'This API creates a new user with a new email', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user', 'file': 'test_users.py', 'params': ['user_id'], 'summary': 'This API gets an existing user', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_current_user', 'file': 'test_users.py', 'params': ['user_id'], 'summary': 'This API gets an existing user for the current user', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_permissions_error', 'file': 'test_users.py', 'params': ['user_id'], 'summary': 'This API gets an existing user, but the user does not have enough permissions', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_existing_username', 'file': 'test_users.py', 'params': [], 'summary': 'This API creates a new user with an existing username', 'responses': {'400': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_by_normal_user', 'file': 'test_users.py', 'params': [], 'summary': 'This API creates a new user by a normal user', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'test_retrieve_users', 'file': 'test_users.py', 'params': [], 'summary': 'This API retrieves all users', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': {'email': 'string'}, 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the current user', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the password of the current user', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me_incorrect_password', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the password of the current user with an incorrect password', 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me_email_exists', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the current user with an email that already exists', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['email', 'password', 'full_name'], 'summary': 'Register a new user', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user_already_exists_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['email', 'password', 'full_name'], 'summary': 'Register a new user', 'responses': {'400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'full_name'], 'summary': 'Update a user', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_not_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'full_name'], 'summary': 'Update a user', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_email_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'email'], 'summary': 'Update a user', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'summary': 'Delete the current user', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me_as_superuser', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'summary': 'Delete the current user', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_super_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_current_super_user_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_without_privileges', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'User': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'user_authentication_headers', 'file': 'backend\\app\\tests\\utils\\user.py', 'params': ['username', 'password'], 'summary': 'Get authentication headers', 'responses': {'200': {'description': 'Authentication headers', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'authentication_token_from_email', 'file': 'backend\\app\\tests\\utils\\user.py', 'params': ['email'], 'summary': 'Get authentication headers from email', 'responses': {'200': {'description': 'Authentication headers', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}], 'Mailcatcher': [{'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Get latest email from MailCatcher', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'response': {'error': 'string'}}, '500': {'description': 'Timeout while trying to get latest email', 'response': {'error': 'string'}}}}, {'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Get latest email from MailCatcher', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'response': {'error': 'string'}}}}]}}
[2025-06-29 20:42:23] [ERROR] [routes.endpoints] Error saving endpoints: MongoDBClient.update_one() got an unexpected keyword argument 'upsert'
[2025-06-29 20:42:48] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 10, 'group_count': {'Items': 5, 'Login': 5, 'Users': 10, 'Utils': 2, 'Test_items': 10, 'Test_login': 7, 'Test_private': 1, 'Test_users': 24, 'User': 2, 'Mailcatcher': 2}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id'], 'summary': 'Get item by ID.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id', 'item_in'], 'summary': 'Update an item.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend/app/api/routes/items.py', 'params': ['id'], 'summary': 'Delete an item.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items', 'method': 'GET', 'handler': 'read_items', 'file': 'backend/app/api/routes/items.py', 'params': ['skip', 'limit'], 'summary': 'Retrieve items.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[ItemPublic]', 'count': 'int'}}}}, {'path': '/items', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': ['item_in'], 'summary': 'Create new item.', 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Test access token.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend/app/api/routes/login.py', 'params': ['email'], 'summary': 'Password Recovery.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend/app/api/routes/login.py', 'params': ['body'], 'summary': 'Reset password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend/app/api/routes/login.py', 'params': ['email'], 'summary': 'HTML Content for Password Recovery.', 'responses': {'200': {'description': 'HTML Content for Password Recovery.', 'content_type': 'text/html', 'response': {'content': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'login_access_token', 'file': 'backend/app/api/routes/login.py', 'params': ['form_data'], 'summary': 'OAuth2 compatible token login, get an access token for future requests', 'responses': {'200': {'description': 'Access token', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}], 'Users': [{'path': '/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'summary': 'Create new user without the need to be logged in.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id'], 'summary': 'Get a specific user by id.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}, '403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id', 'user_in'], 'summary': 'Update a user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}, '404': {'description': 'The user with this id does not exist in the system', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_id'], 'summary': 'Delete a user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users', 'method': 'GET', 'handler': 'read_users', 'file': 'backend/app/api/routes/users.py', 'params': ['skip', 'limit'], 'summary': 'Retrieve users.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[UserPublic]', 'count': 'int'}}}}, {'path': '/users', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'summary': 'Create new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Get current user.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend/app/api/routes/users.py', 'params': ['user_in'], 'summary': 'Update own user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'bool', 'is_superuser': 'bool'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/api/routes/users.py', 'params': ['body'], 'summary': 'Update own password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Delete own user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend/app/api/routes/utils.py', 'params': [], 'summary': 'Health check.', 'responses': {'200': {'description': 'Health check successful', 'content_type': 'application/json', 'response': {'result': 'bool'}}}}, {'path': '/test-email/{email_to}', 'method': 'GET', 'handler': 'test_email', 'file': 'backend/app/api/routes/utils.py', 'params': ['email_to'], 'summary': 'Test emails.', 'responses': {'200': {'description': 'Test email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}], 'Test_items': [{'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API reads an item by id', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_found', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API reads an item by id, but the item is not found', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_enough_permissions', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API reads an item by id, but the user does not have enough permissions', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'test_read_items', 'file': 'test_items.py', 'params': [], 'summary': 'This API reads all items', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API updates an item by id', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_found', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API updates an item by id, but the item is not found', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_enough_permissions', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API updates an item by id, but the user does not have enough permissions', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API deletes an item by id', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_found', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API deletes an item by id, but the item is not found', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_enough_permissions', 'file': 'test_items.py', 'params': ['item_id'], 'summary': 'This API deletes an item by id, but the user does not have enough permissions', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_login': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token', 'file': 'test_login.py', 'params': [], 'summary': 'This API gets an access token', 'responses': {'200': {'description': 'Access token obtained', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token_incorrect_password', 'file': 'test_login.py', 'params': [], 'summary': 'This API gets an access token with incorrect password', 'responses': {'400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_use_access_token', 'file': 'test_login.py', 'params': [], 'summary': 'This API tests an access token', 'responses': {'200': {'description': 'Access token tested', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password', 'file': 'test_login.py', 'params': ['email'], 'summary': 'This API recovers a password', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password_user_not_exits', 'file': 'test_login.py', 'params': ['email'], 'summary': 'This API recovers a password for a user that does not exist', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password', 'file': 'test_login.py', 'params': [], 'summary': 'This API resets a password', 'responses': {'200': {'description': 'Password reset', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password_invalid_token', 'file': 'test_login.py', 'params': [], 'summary': 'This API resets a password with an invalid token', 'responses': {'400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'test_create_user', 'file': 'test_private.py', 'params': [], 'summary': 'This API creates a user', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}], 'Test_users': [{'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_superuser_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API gets the current user for a superuser', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_normal_user_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API gets the current user for a normal user', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_new_email', 'file': 'test_users.py', 'params': [], 'summary': 'This API creates a new user with a new email', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user', 'file': 'test_users.py', 'params': ['user_id'], 'summary': 'This API gets an existing user', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_current_user', 'file': 'test_users.py', 'params': ['user_id'], 'summary': 'This API gets an existing user for the current user', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'bool', 'is_superuser': 'bool', 'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_permissions_error', 'file': 'test_users.py', 'params': ['user_id'], 'summary': 'This API gets an existing user, but the user does not have enough permissions', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_existing_username', 'file': 'test_users.py', 'params': [], 'summary': 'This API creates a new user with an existing username', 'responses': {'400': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_by_normal_user', 'file': 'test_users.py', 'params': [], 'summary': 'This API creates a new user by a normal user', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'test_retrieve_users', 'file': 'test_users.py', 'params': [], 'summary': 'This API retrieves all users', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': {'email': 'string'}, 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the current user', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the password of the current user', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me_incorrect_password', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the password of the current user with an incorrect password', 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me_email_exists', 'file': 'test_users.py', 'params': [], 'summary': 'This API updates the current user with an email that already exists', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['email', 'password', 'full_name'], 'summary': 'Register a new user', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user_already_exists_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['email', 'password', 'full_name'], 'summary': 'Register a new user', 'responses': {'400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'full_name'], 'summary': 'Update a user', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_not_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'full_name'], 'summary': 'Update a user', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_email_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id', 'email'], 'summary': 'Update a user', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'summary': 'Delete the current user', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me_as_superuser', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'summary': 'Delete the current user', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_super_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_current_super_user_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_without_privileges', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': ['user_id'], 'summary': 'Delete a user', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'User': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'user_authentication_headers', 'file': 'backend\\app\\tests\\utils\\user.py', 'params': ['username', 'password'], 'summary': 'Get authentication headers', 'responses': {'200': {'description': 'Authentication headers', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'authentication_token_from_email', 'file': 'backend\\app\\tests\\utils\\user.py', 'params': ['email'], 'summary': 'Get authentication headers from email', 'responses': {'200': {'description': 'Authentication headers', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}], 'Mailcatcher': [{'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Get latest email from MailCatcher', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'response': {'error': 'string'}}, '500': {'description': 'Timeout while trying to get latest email', 'response': {'error': 'string'}}}}, {'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Get latest email from MailCatcher', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'response': {'error': 'string'}}}}]}}
[2025-06-29 20:42:48] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-06-30 21:20:07] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:20:23] [INFO] [routes.endpoints] Successfully extracted 7 endpoints.
[2025-06-30 21:20:27] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:20:41] [INFO] [routes.endpoints] Successfully extracted 7 endpoints.
[2025-06-30 21:34:42] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:34:57] [INFO] [routes.endpoints] Successfully extracted 7 endpoints.
[2025-06-30 21:41:13] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:41:28] [INFO] [routes.endpoints] Successfully extracted 1 endpoints.
[2025-06-30 21:42:02] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:42:16] [INFO] [routes.endpoints] Successfully extracted 7 endpoints.
[2025-06-30 21:43:21] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:43:36] [INFO] [routes.endpoints] Successfully extracted 7 endpoints.
[2025-06-30 21:47:32] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:48:07] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-06-30 21:49:13] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 21:49:30] [INFO] [routes.endpoints] Successfully extracted 10 endpoints.
[2025-06-30 21:50:11] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 10, 'group_count': {'Items': 5, 'Login': 4, 'Users': 10, 'Utils': 1, 'Test_items': 10, 'Test_login': 7, 'Test_private': 1, 'Test_users': 24, 'Test_user': 8, 'Mailcatcher': 2}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Get item by ID.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Update an item.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Delete an item.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items', 'method': 'GET', 'handler': 'read_items', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Retrieve items.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[ItemPublic]', 'count': 'int'}}}}, {'path': '/items', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': [], 'summary': 'Create new item.', 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Test access token.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend/app/api/routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Password Recovery.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Reset password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend/app/api/routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'HTML Content for Password Recovery.', 'responses': {'200': {'description': 'HTML content for password recovery', 'content_type': 'text/html', 'response': {'content': 'string', 'subject': 'string'}}}}], 'Users': [{'path': '/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Create new user without the need to be logged in.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Get a specific user by id.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}, '403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Update a user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}, '404': {'description': 'The user with this id does not exist in the system', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Delete a user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users', 'method': 'GET', 'handler': 'read_users', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Retrieve users.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[UserPublic]', 'count': 'int'}}}}, {'path': '/users', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Create new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Get current user.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Update own user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Update own password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Delete own user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend/app/api/routes/utils.py', 'params': [], 'summary': 'Health check.', 'responses': {'200': {'description': 'Health check passed', 'content_type': 'application/json', 'response': {'result': 'boolean'}}}}], 'Test_items': [{'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_found', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_enough_permissions', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'test_read_items', 'file': 'test_items.py', 'params': [], 'summary': 'Fetches a list of items from the database.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': {'type': 'array', 'items': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Updates an item by ID in the database.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_found', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Updates an item by ID in the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_enough_permissions', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Updates an item by ID in the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item by ID from the database.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_found', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item by ID from the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_enough_permissions', 'file': 'test_items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item by ID from the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_login': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token', 'file': 'test_login.py', 'params': [], 'summary': 'Fetches an access token for a user.', 'responses': {'200': {'description': 'Access token found', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token_incorrect_password', 'file': 'test_login.py', 'params': [], 'summary': 'Fetches an access token for a user.', 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_use_access_token', 'file': 'test_login.py', 'params': [], 'summary': 'Tests an access token for a user.', 'responses': {'200': {'description': 'Access token valid', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password', 'file': 'test_login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to a user.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password_user_not_exits', 'file': 'test_login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to a user.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password', 'file': 'test_login.py', 'params': [], 'summary': "Resets a user's password.", 'responses': {'200': {'description': 'Password reset', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password_invalid_token', 'file': 'test_login.py', 'params': [], 'summary': "Resets a user's password.", 'responses': {'400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'test_create_user', 'file': 'test_private.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int'}}}}], 'Test_users': [{'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_superuser_me', 'file': 'test_users.py', 'params': [], 'summary': "Fetches the current user's information.", 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'boolean', 'is_superuser': 'boolean', 'email': 'string'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_normal_user_me', 'file': 'test_users.py', 'params': [], 'summary': "Fetches the current user's information.", 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'boolean', 'is_superuser': 'boolean', 'email': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_new_email', 'file': 'test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user', 'file': 'test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_current_user', 'file': 'test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_permissions_error', 'file': 'test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_existing_username', 'file': 'test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'400': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_by_normal_user', 'file': 'test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'403': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'test_retrieve_users', 'file': 'test_users.py', 'params': [], 'summary': 'Fetches a list of users from the database.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': {'type': 'array', 'items': {'email': 'string'}}, 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me', 'file': 'test_users.py', 'params': [], 'summary': "Updates the current user's information.", 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me', 'file': 'test_users.py', 'params': [], 'summary': "Updates the current user's password.", 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me_incorrect_password', 'file': 'test_users.py', 'params': [], 'summary': "Updates the current user's password.", 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me_email_exists', 'file': 'test_users.py', 'params': [], 'summary': "Updates the current user's information.", 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user with the given email and password.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user_already_exists_error', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user with the given email and password.', 'responses': {'400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Updates a user with the given ID.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'full_name': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_not_exists', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Updates a user with the given ID.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_email_exists', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Updates a user with the given ID.', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Deletes the current user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me_as_superuser', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Deletes the current user.', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_super_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_not_found', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_current_super_user_error', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_without_privileges', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_user': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_authenticate_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [], 'summary': 'Authenticate a user with the given email and password.', 'responses': {'200': {'description': 'User authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_not_authenticate_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [], 'summary': 'Authenticate a user with the given email and password.', 'responses': {'200': {'description': 'User not authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_check_if_user_is_active', 'file': 'backend/app/tests/crud/test_user.py', 'params': [], 'summary': 'Check if a user is active.', 'responses': {'200': {'description': 'User is active', 'content_type': 'application/json', 'response': {'is_active': 'boolean'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_check_if_user_is_active_inactive', 'file': 'backend/app/tests/crud/test_user.py', 'params': [], 'summary': 'Check if a user is active.', 'responses': {'200': {'description': 'User is active', 'content_type': 'application/json', 'response': {'is_active': 'boolean'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_check_if_user_is_superuser', 'file': 'backend/app/tests/crud/test_user.py', 'params': [], 'summary': 'Check if a user is superuser.', 'responses': {'200': {'description': 'User is superuser', 'content_type': 'application/json', 'response': {'is_superuser': 'boolean'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_check_if_user_is_superuser_normal_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [], 'summary': 'Check if a user is superuser.', 'responses': {'200': {'description': 'User is not superuser', 'content_type': 'application/json', 'response': {'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Get a user with the given ID.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Update a user with the given ID.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'full_name': 'string'}}}}], 'Mailcatcher': [{'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Fetch latest email from MailCatcher.', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'content_type': 'application/json', 'response': {'error': 'string'}}, '500': {'description': 'Timeout while trying to get latest email', 'content_type': 'application/json', 'response': {'error': 'string'}}}}, {'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Fetch latest email from MailCatcher.', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'content_type': 'application/json', 'response': {'error': 'string'}}}}]}}
[2025-06-30 21:50:11] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-06-30 22:13:29] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:13:46] [INFO] [routes.endpoints] Successfully extracted 10 endpoints.
[2025-06-30 22:14:08] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 10, 'group_count': {'Items': 5, 'Login': 4, 'Users': 10, 'Utils': 1, 'Test_items': 10, 'Test_login': 7, 'Test_private': 1, 'Test_users': 24, 'Test_user': 4, 'Mailcatcher': 2}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Get item by ID.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Update an item.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Delete an item.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items', 'method': 'GET', 'handler': 'read_items', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Retrieve items.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[ItemPublic]', 'count': 'int'}}}}, {'path': '/items', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Create new item.', 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Test access token.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend/app/api/routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Password Recovery.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Reset password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend/app/api/routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'HTML Content for Password Recovery.', 'responses': {'200': {'description': 'HTML Content for Password Recovery.', 'content_type': 'text/html', 'response': {'content': 'string', 'subject': 'string'}}}}], 'Users': [{'path': '/items/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Create new user without the need to be logged in.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/items/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Get a specific user by id.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/items/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Update a user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/items/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Delete a user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/items', 'method': 'GET', 'handler': 'read_users', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Retrieve users.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[UserPublic]', 'count': 'int'}}}}, {'path': '/items', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Create new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/items/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Get current user.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/items/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Update own user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/items/me', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Update own password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/items/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Delete own user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend/app/api/routes/utils.py', 'params': [], 'summary': 'Health check.', 'responses': {'200': {'description': 'Health check passed', 'content_type': 'application/json', 'response': {'result': 'boolean'}}}}], 'Test_items': [{'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_found', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_enough_permissions', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'test_read_items', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [], 'summary': 'Fetches a list of items from the database.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[{...}]', 'count': 'int'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Updates an item in the database.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'title': 'string', 'description': 'string', 'id': 'int', 'owner_id': 'int'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_found', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Updates an item in the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_enough_permissions', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Updates an item in the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item from the database.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_found', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item from the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_enough_permissions', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item from the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_login': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': 'Fetches an access token for a user.', 'responses': {'200': {'description': 'Access token found', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token_incorrect_password', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': 'Fetches an access token for a user.', 'responses': {'400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_use_access_token', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': 'Tests an access token for a user.', 'responses': {'200': {'description': 'Access token valid', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [{'name': 'email', 'in': 'query', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to a user.', 'responses': {'200': {'description': 'Email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password_user_not_exits', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [{'name': 'email', 'in': 'query', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to a user.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': "Resets a user's password.", 'responses': {'200': {'description': 'Password reset', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password_invalid_token', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': "Resets a user's password.", 'responses': {'400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'test_create_user', 'file': 'backend/app/tests/api/routes/test_private.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}], 'Test_users': [{'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_superuser_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Fetches the current user's information.", 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'boolean', 'is_superuser': 'boolean', 'email': 'string'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_normal_user_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Fetches the current user's information.", 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'boolean', 'is_superuser': 'boolean', 'email': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_new_email', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_current_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_permissions_error', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID.', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_existing_username', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'400': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_by_normal_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'403': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'test_retrieve_users', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Fetches a list of users.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[{...}]', 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's information.", 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's password.", 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me_incorrect_password', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's password.", 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me_email_exists', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's information.", 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Creates a new user in the database.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user_already_exists_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Creates a new user in the database.', 'responses': {'400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Updates a user in the database.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_not_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Updates a user in the database.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_email_exists', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}, {'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Updates a user in the database.', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'summary': 'Deletes the current user from the database.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me_as_superuser', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [], 'summary': 'Deletes the current user from the database.', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_super_user', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user from the database.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_not_found', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user from the database.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_current_super_user_error', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user from the database.', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_without_privileges', 'file': 'backend\\app\\tests\\api\\routes\\test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user from the database.', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_user': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_authenticate_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': [{'name': 'username', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Authenticates a user and returns an access token.', 'responses': {'200': {'description': 'User authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_not_authenticate_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': [{'name': 'username', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Authenticates a user and returns an access token.', 'responses': {'200': {'description': 'User not authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend\\app\\tests\\crud\\test_user.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'is_superuser', 'in': 'body', 'required': True, 'type': 'boolean'}], 'summary': 'Updates a user in the database.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}], 'Mailcatcher': [{'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Fetch latest email from MailCatcher.', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'content_type': 'application/json', 'response': {'error': 'string'}}, '500': {'description': 'Timeout while trying to get latest email', 'content_type': 'application/json', 'response': {'error': 'string'}}}}, {'path': '/messages', 'method': 'GET', 'handler': 'findLastEmail', 'file': 'frontend/tests/utils/mailcatcher.ts', 'params': [], 'summary': 'Fetch latest email from MailCatcher with timeout.', 'responses': {'200': {'description': 'Email found', 'content_type': 'application/json', 'response': {'id': 'string', 'subject': 'string', 'from': 'string', 'to': 'string', 'text': 'string', 'html': 'string'}}, '404': {'description': 'No emails found', 'content_type': 'application/json', 'response': {'error': 'string'}}, '500': {'description': 'Timeout while trying to get latest email', 'content_type': 'application/json', 'response': {'error': 'string'}}}}]}}
[2025-06-30 22:14:08] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-06-30 22:25:48] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:26:21] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-06-30 22:27:41] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:28:16] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-06-30 22:28:37] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:29:50] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-06-30 22:33:03] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:33:20] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-06-30 22:34:35] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:35:14] [INFO] [routes.endpoints] Successfully extracted 6 endpoints.
[2025-06-30 22:35:47] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:36:50] [INFO] [routes.endpoints] Successfully extracted 8 endpoints.
[2025-06-30 22:37:22] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:38:26] [INFO] [routes.endpoints] Successfully extracted 8 endpoints.
[2025-06-30 22:40:08] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:40:51] [INFO] [routes.endpoints] Successfully extracted 9 endpoints.
[2025-06-30 22:41:04] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:42:25] [INFO] [routes.endpoints] Successfully extracted 6 endpoints.
[2025-06-30 22:43:09] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:44:03] [INFO] [routes.endpoints] Successfully extracted 4 endpoints.
[2025-06-30 22:44:31] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-06-30 22:44:55] [INFO] [routes.endpoints] Successfully extracted 10 endpoints.
[2025-06-30 22:45:18] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 10, 'group_count': {'Items': 5, 'Login': 4, 'Private': 1, 'Users': 11, 'Utils': 1, 'Test_items': 10, 'Test_login': 7, 'Test_private': 1, 'Test_users': 24, 'Test_user': 4}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Get item by ID.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Update an item.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'id', 'in': 'query', 'required': True, 'type': 'uuid'}], 'summary': 'Delete an item.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items', 'method': 'GET', 'handler': 'read_items', 'file': 'backend/app/api/routes/items.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Retrieve items.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[{ id: uuid, title: string, description: string, owner_id: uuid }]', 'count': 'int'}}}}, {'path': '/items', 'method': 'POST', 'handler': 'create_item', 'file': 'backend/app/api/routes/items.py', 'params': [], 'summary': 'Create new item.', 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'title': 'string', 'description': 'string', 'owner_id': 'uuid'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Test access token.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend/app/api/routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Password Recovery.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend/app/api/routes/login.py', 'params': [], 'summary': 'Reset password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend/app/api/routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'HTML Content for Password Recovery.', 'responses': {'200': {'description': 'HTML Content for Password Recovery.', 'content_type': 'text/html', 'response': {'content': 'string', 'subject': 'string'}}}}], 'Private': [{'path': '/create-user', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/private.py', 'params': [], 'summary': 'Create a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}], 'Users': [{'path': '/users', 'method': 'GET', 'handler': 'read_users', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'skip', 'in': 'query', 'required': False, 'type': 'int'}, {'name': 'limit', 'in': 'query', 'required': False, 'type': 'int'}], 'summary': 'Retrieve users.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[{ id: uuid, email: string, full_name: string, hashed_password: string, is_active: boolean, is_superuser: boolean }]', 'count': 'int'}}}}, {'path': '/users', 'method': 'POST', 'handler': 'create_user', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Create new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Get current user.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Update own user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Update own password.', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Delete own user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Get a specific user by id.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Update a user.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Delete a user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/api/routes/users.py', 'params': [], 'summary': 'Create new user without the need to be logged in.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend/app/api/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid'}], 'summary': 'Get a specific user by id.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'uuid', 'email': 'string', 'full_name': 'string', 'hashed_password': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend/app/api/routes/utils.py', 'params': [], 'summary': 'Health check.', 'responses': {'200': {'description': 'Health check passed', 'content_type': 'application/json', 'response': {'result': 'boolean'}}}}], 'Test_items': [{'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'int', 'title': 'string', 'description': 'string', 'owner_id': 'int'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_found', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'test_read_item_not_enough_permissions', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches an item by ID from the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'test_read_items', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [], 'summary': 'Fetches a list of items from the database.', 'responses': {'200': {'description': 'Items found', 'content_type': 'application/json', 'response': {'data': '[{id: int, title: string, description: string, owner_id: int}]'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Updates an item by ID in the database.', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'int', 'title': 'string', 'description': 'string', 'owner_id': 'int'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_found', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Updates an item by ID in the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'test_update_item_not_enough_permissions', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Updates an item by ID in the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item by ID from the database.', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_found', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item by ID from the database.', 'responses': {'404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'test_delete_item_not_enough_permissions', 'file': 'backend/app/tests/api/routes/test_items.py', 'params': [{'name': 'item_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Deletes an item by ID from the database.', 'responses': {'400': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_login': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': 'Fetches an access token for a user.', 'responses': {'200': {'description': 'Access token found', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_get_access_token_incorrect_password', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': 'Fetches an access token for a user.', 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_use_access_token', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': 'Tests an access token for a user.', 'responses': {'200': {'description': 'Access token valid', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [{'name': 'email', 'in': 'query', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to a user.', 'responses': {'200': {'description': 'Password recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'test_recovery_password_user_not_exits', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [{'name': 'email', 'in': 'query', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to a user.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': "Resets a user's password.", 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'test_reset_password_invalid_token', 'file': 'backend/app/tests/api/routes/test_login.py', 'params': [], 'summary': "Resets a user's password.", 'responses': {'400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'test_create_user', 'file': 'backend/app/tests/api/routes/test_private.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}], 'Test_users': [{'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_superuser_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Fetches the current user's information.", 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'boolean', 'is_superuser': 'boolean', 'email': 'string'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'test_get_users_normal_user_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Fetches the current user's information.", 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'is_active': 'boolean', 'is_superuser': 'boolean', 'email': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_new_email', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_current_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'int', 'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_existing_user_permissions_error', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'query', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_existing_username', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'400': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'test_create_user_by_normal_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Creates a new user.', 'responses': {'403': {'description': 'Not enough permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'test_retrieve_users', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Fetches a list of users from the database.', 'responses': {'200': {'description': 'Users found', 'content_type': 'application/json', 'response': {'data': '[{id: int, email: string, full_name: string}]', 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's information.", 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's password.", 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'test_update_password_me_incorrect_password', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's password.", 'responses': {'400': {'description': 'Incorrect password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'test_update_user_me_email_exists', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': "Updates the current user's information.", 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Creates a new user with the given email and password.', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'test_register_user_already_exists_error', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Creates a new user with the given email and password.', 'responses': {'400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Updates a user with the given ID.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'full_name': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_not_exists', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Updates a user with the given ID.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user_email_exists', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}, {'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Updates a user with the given ID.', 'responses': {'409': {'description': 'User with this email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Deletes the current user.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'test_delete_user_me_as_superuser', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [], 'summary': 'Deletes the current user.', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_super_user', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_not_found', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_current_super_user_error', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'403': {'description': 'Super users are not allowed to delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'test_delete_user_without_privileges', 'file': 'backend/app/tests/api/routes/test_users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Deletes a user with the given ID.', 'responses': {'403': {'description': "The user doesn't have enough privileges", 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Test_user': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'test_authenticate_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [{'name': 'username', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Authenticates a user and returns an access token.', 'responses': {'200': {'description': 'User authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'test_not_authenticate_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [{'name': 'username', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Authenticates a user and returns an access token.', 'responses': {'200': {'description': 'User not authenticated', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'test_get_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}], 'summary': 'Fetches a user by ID from the database.', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'test_update_user', 'file': 'backend/app/tests/crud/test_user.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'int'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'is_superuser', 'in': 'body', 'required': True, 'type': 'boolean'}], 'summary': 'Updates a user with the given ID.', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}]}}
[2025-06-30 22:45:18] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-07-01 10:54:58] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 10:55:43] [INFO] [routes.endpoints] Successfully extracted 8 endpoints.
[2025-07-01 10:57:08] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 10:57:29] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 10:58:19] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 10:58:39] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 10:59:44] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:00:04] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:01:18] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:01:37] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:02:35] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:02:55] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:04:37] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:05:04] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:07:41] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:08:10] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:09:17] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:09:19] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:10:57] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:10:59] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 11:11:54] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 11:12:33] [INFO] [routes.endpoints] Successfully extracted 7 endpoints.
[2025-07-01 11:12:58] [INFO] [routes.endpoints] Received request to save endpoints: {'user_id': None, 'repo_url': 'https://github.com/tiangolo/full-stack-fastapi-postgresql', 'branch': None, 'count': 7, 'group_count': {'Items': 8, 'Login': 8, 'Users': 20, 'Utils': 1, 'Private': 1, 'Auth': 1, 'Mailcatcher': 1}, 'endpoints': {'Items': [{'path': '/items/{id}', 'method': 'GET', 'handler': 'read_item', 'file': 'backend\\app\\api\\routes\\items.py', 'params': [{'name': 'id', 'in': 'path', 'required': True, 'type': 'uuid.UUID'}], 'summary': 'Fetches a specific item by its ID.', 'operation': 'read', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'title': 'str', 'description': 'str', 'owner_id': 'uuid.UUID'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/items/', 'method': 'POST', 'handler': 'create_item', 'file': 'backend\\app\\api\\routes\\items.py', 'params': [{'name': 'item_in', 'in': 'body', 'required': True, 'type': 'ItemCreate'}], 'summary': 'Creates a new item in the database.', 'operation': 'create', 'responses': {'200': {'description': 'Item created', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'title': 'str', 'description': 'str', 'owner_id': 'uuid.UUID'}}, '400': {'description': 'Invalid request', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/items/{id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'backend\\app\\api\\routes\\items.py', 'params': [{'name': 'id', 'in': 'path', 'required': True, 'type': 'uuid.UUID'}, {'name': 'item_in', 'in': 'body', 'required': True, 'type': 'ItemUpdate'}], 'summary': 'Updates an existing item in the database.', 'operation': 'update', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'title': 'str', 'description': 'str', 'owner_id': 'uuid.UUID'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/items/{id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'backend\\app\\api\\routes\\items.py', 'params': [{'name': 'id', 'in': 'path', 'required': True, 'type': 'uuid.UUID'}], 'summary': 'Deletes an item from the database.', 'operation': 'delete', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'str'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/items/{item_id}', 'method': 'GET', 'handler': 'read_item', 'file': 'routes/items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Fetches an item by ID from the database.', 'operation': 'read', 'responses': {'200': {'description': 'Item found', 'content_type': 'application/json', 'response': {'id': 'string', 'title': 'string', 'description': 'string', 'owner_id': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/', 'method': 'GET', 'handler': 'read_items', 'file': 'routes/items.py', 'params': [], 'summary': 'Retrieves a list of items from the database.', 'operation': 'read', 'responses': {'200': {'description': 'Items retrieved', 'content_type': 'application/json', 'response': {'data': [{'id': 'string', 'title': 'string', 'description': 'string', 'owner_id': 'string'}]}}}}, {'path': '/items/{item_id}', 'method': 'PUT', 'handler': 'update_item', 'file': 'routes/items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Updates an item in the database.', 'operation': 'update', 'responses': {'200': {'description': 'Item updated', 'content_type': 'application/json', 'response': {'id': 'string', 'title': 'string', 'description': 'string', 'owner_id': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/items/{item_id}', 'method': 'DELETE', 'handler': 'delete_item', 'file': 'routes/items.py', 'params': [{'name': 'item_id', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Deletes an item from the database.', 'operation': 'delete', 'responses': {'200': {'description': 'Item deleted', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'Item not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Login': [{'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'backend\\app\\api\\routes\\login.py', 'params': [], 'summary': 'Tests the access token by returning the current user.', 'operation': 'other', 'responses': {'200': {'description': 'Token valid', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}, '403': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'recover_password', 'file': 'backend\\app\\api\\routes\\login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'str'}], 'summary': 'Sends a password recovery email to the specified email address.', 'operation': 'other', 'responses': {'200': {'description': 'Email sent', 'content_type': 'application/json', 'response': {'message': 'str'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'backend\\app\\api\\routes\\login.py', 'params': [{'name': 'body', 'in': 'body', 'required': True, 'type': 'NewPassword'}], 'summary': 'Resets the password for the user with the given token.', 'operation': 'other', 'responses': {'200': {'description': 'Password reset successful', 'content_type': 'application/json', 'response': {'message': 'str'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/password-recovery-html-content/{email}', 'method': 'POST', 'handler': 'recover_password_html_content', 'file': 'backend\\app\\api\\routes\\login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'str'}], 'summary': 'Generates and returns HTML content for password recovery.', 'operation': 'other', 'responses': {'200': {'description': 'HTML content generated', 'content_type': 'text/html', 'response': {'content': 'str'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/login/access-token', 'method': 'POST', 'handler': 'login_access_token', 'file': 'routes/login.py', 'params': [], 'summary': 'Authenticates a user and returns an access token.', 'operation': 'other', 'responses': {'200': {'description': 'Authentication successful', 'content_type': 'application/json', 'response': {'access_token': 'string'}}, '400': {'description': 'Invalid credentials', 'content_type': 'application/json', 'response': {}}}}, {'path': '/login/test-token', 'method': 'POST', 'handler': 'test_token', 'file': 'routes/login.py', 'params': [], 'summary': 'Tests if the provided token is valid.', 'operation': 'other', 'responses': {'200': {'description': 'Token valid', 'content_type': 'application/json', 'response': {'email': 'string'}}}}, {'path': '/password-recovery/{email}', 'method': 'POST', 'handler': 'password_recovery', 'file': 'routes/login.py', 'params': [{'name': 'email', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Sends a password recovery email to the specified email address.', 'operation': 'other', 'responses': {'200': {'description': 'Recovery email sent', 'content_type': 'application/json', 'response': {'message': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/reset-password/', 'method': 'POST', 'handler': 'reset_password', 'file': 'routes/login.py', 'params': [], 'summary': "Resets the user's password using a token.", 'operation': 'other', 'responses': {'200': {'description': 'Password reset successful', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Invalid token', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Users': [{'path': '/users/', 'method': 'POST', 'handler': 'create_user', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'user_in', 'in': 'body', 'required': True, 'type': 'UserCreate'}], 'summary': 'Creates a new user in the database.', 'operation': 'create', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/me', 'method': 'PATCH', 'handler': 'update_user_me', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'user_in', 'in': 'body', 'required': True, 'type': 'UserUpdateMe'}], 'summary': "Updates the current user's information.", 'operation': 'update', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}, '409': {'description': 'Email already exists', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/me/password', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'body', 'in': 'body', 'required': True, 'type': 'UpdatePassword'}], 'summary': "Updates the current user's password.", 'operation': 'update', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'str'}}, '400': {'description': 'Invalid password', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/me', 'method': 'GET', 'handler': 'read_user_me', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [], 'summary': "Retrieves the current user's information.", 'operation': 'read', 'responses': {'200': {'description': 'User retrieved', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}}}, {'path': '/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [], 'summary': "Deletes the current user's account.", 'operation': 'delete', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'str'}}, '403': {'description': 'Superuser cannot delete themselves', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'user_in', 'in': 'body', 'required': True, 'type': 'UserRegister'}], 'summary': 'Registers a new user without login.', 'operation': 'create', 'responses': {'200': {'description': 'User registered', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'read_user_by_id', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid.UUID'}], 'summary': 'Retrieves a specific user by their ID.', 'operation': 'read', 'responses': {'200': {'description': 'User retrieved', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}, '403': {'description': 'Insufficient privileges', 'content_type': 'application/json', 'response': {'detail': 'str'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid.UUID'}, {'name': 'user_in', 'in': 'body', 'required': True, 'type': 'UserUpdate'}], 'summary': "Updates a specific user's information.", 'operation': 'update', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'id': 'uuid.UUID', 'email': 'str', 'full_name': 'str'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}, '409': {'description': 'Email already exists', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend\\app\\api\\routes\\users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'uuid.UUID'}], 'summary': 'Deletes a specific user from the database.', 'operation': 'delete', 'responses': {'200': {'description': 'User deleted', 'content_type': 'application/json', 'response': {'message': 'str'}}, '403': {'description': 'Cannot delete superuser', 'content_type': 'application/json', 'response': {'detail': 'str'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'str'}}}}, {'path': '/users/me', 'method': 'GET', 'handler': 'get_current_user', 'file': 'routes/users.py', 'params': [], 'summary': "Retrieves the current user's details.", 'operation': 'read', 'responses': {'200': {'description': 'User retrieved', 'content_type': 'application/json', 'response': {'id': 'string', 'email': 'string', 'full_name': 'string', 'is_active': 'boolean', 'is_superuser': 'boolean'}}}}, {'path': '/users/{user_id}', 'method': 'GET', 'handler': 'get_user', 'file': 'routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Fetches a user by ID from the database.', 'operation': 'read', 'responses': {'200': {'description': 'User found', 'content_type': 'application/json', 'response': {'id': 'string', 'email': 'string', 'full_name': 'string'}}, '403': {'description': 'Insufficient permissions', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/', 'method': 'POST', 'handler': 'create_user', 'file': 'routes/users.py', 'params': [], 'summary': 'Creates a new user in the database.', 'operation': 'create', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'string', 'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {}}}}, {'path': '/users/', 'method': 'GET', 'handler': 'get_users', 'file': 'routes/users.py', 'params': [], 'summary': 'Retrieves a list of users from the database.', 'operation': 'read', 'responses': {'200': {'description': 'Users retrieved', 'content_type': 'application/json', 'response': {'data': [{'id': 'string', 'email': 'string', 'full_name': 'string'}], 'count': 'int'}}}}, {'path': '/users/me', 'method': 'PATCH', 'handler': 'update_current_user', 'file': 'routes/users.py', 'params': [], 'summary': "Updates the current user's details.", 'operation': 'update', 'responses': {'200': {'description': 'User updated', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}, '409': {'description': 'Email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'update_password', 'file': 'routes/users.py', 'params': [], 'summary': "Updates the current user's password.", 'operation': 'update', 'responses': {'200': {'description': 'Password updated', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'Incorrect current password', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me/password', 'method': 'PATCH', 'handler': 'update_password_me', 'file': 'backend/app/routes/users.py', 'params': [{'name': 'current_password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'new_password', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': "Updates the current user's password. Returns error if new password is same as current.", 'operation': 'update', 'responses': {'200': {'description': 'Password updated successfully', 'content_type': 'application/json', 'response': {'message': 'string'}}, '400': {'description': 'New password cannot be the same as current one', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/signup', 'method': 'POST', 'handler': 'register_user', 'file': 'backend/app/routes/users.py', 'params': [{'name': 'email', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'full_name', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Registers a new user. Returns error if user already exists.', 'operation': 'create', 'responses': {'200': {'description': 'User created successfully', 'content_type': 'application/json', 'response': {'email': 'string', 'full_name': 'string'}}, '400': {'description': 'User already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'PATCH', 'handler': 'update_user', 'file': 'backend/app/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'string'}, {'name': 'full_name', 'in': 'body', 'required': False, 'type': 'string'}, {'name': 'email', 'in': 'body', 'required': False, 'type': 'string'}], 'summary': "Updates a user's details. Returns error if user not found or email already exists.", 'operation': 'update', 'responses': {'200': {'description': 'User updated successfully', 'content_type': 'application/json', 'response': {'full_name': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '409': {'description': 'Email already exists', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/me', 'method': 'DELETE', 'handler': 'delete_user_me', 'file': 'backend/app/routes/users.py', 'params': [], 'summary': 'Deletes the current user. Returns success message on successful deletion.', 'operation': 'delete', 'responses': {'200': {'description': 'User deleted successfully', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Super users cannot delete themselves', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}, {'path': '/users/{user_id}', 'method': 'DELETE', 'handler': 'delete_user', 'file': 'backend/app/routes/users.py', 'params': [{'name': 'user_id', 'in': 'path', 'required': True, 'type': 'string'}], 'summary': 'Deletes a user by ID. Returns success message on successful deletion.', 'operation': 'delete', 'responses': {'200': {'description': 'User deleted successfully', 'content_type': 'application/json', 'response': {'message': 'string'}}, '403': {'description': 'Not enough privileges', 'content_type': 'application/json', 'response': {'detail': 'string'}}, '404': {'description': 'User not found', 'content_type': 'application/json', 'response': {'detail': 'string'}}}}], 'Utils': [{'path': '/health-check/', 'method': 'GET', 'handler': 'health_check', 'file': 'backend\\app\\api\\routes\\utils.py', 'params': [], 'summary': 'Checks the health status of the service.', 'operation': 'other', 'responses': {'200': {'description': 'Service healthy', 'content_type': 'application/json', 'response': {'result': 'bool'}}}}], 'Private': [{'path': '/private/users/', 'method': 'POST', 'handler': 'create_user_private', 'file': 'routes/private.py', 'params': [], 'summary': 'Creates a new user in the database.', 'operation': 'create', 'responses': {'200': {'description': 'User created', 'content_type': 'application/json', 'response': {'id': 'string', 'email': 'string', 'full_name': 'string'}}}}], 'Auth': [{'path': '/login/access-token', 'method': 'POST', 'handler': 'login_access_token', 'file': 'backend/app/routes/auth.py', 'params': [{'name': 'username', 'in': 'body', 'required': True, 'type': 'string'}, {'name': 'password', 'in': 'body', 'required': True, 'type': 'string'}], 'summary': 'Authenticates a user and returns an access token.', 'operation': 'other', 'responses': {'200': {'description': 'Authentication successful', 'content_type': 'application/json', 'response': {'access_token': 'string'}}}}], 'Mailcatcher': [{'path': '/messages', 'method': 'GET', 'handler': 'findEmail', 'file': 'frontend\\tests\\utils\\mailcatcher.ts', 'params': [], 'summary': 'Fetch messages from Mailcatcher', 'operation': 'read', 'responses': {'200': {'description': 'Messages retrieved successfully', 'content_type': 'application/json', 'response': [{'id': 'number', 'sender': 'string', 'subject': 'string', 'body': 'string', 'date': 'string'}]}, '500': {'description': 'Failed to retrieve messages', 'content_type': 'application/json', 'response': {'error': 'string'}}}}]}}
[2025-07-01 11:12:58] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-07-01 12:43:40] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 12:44:20] [INFO] [routes.endpoints] Successfully extracted 9 endpoints.
[2025-07-01 12:44:43] [INFO] [routes.endpoints] Received request to save endpoints
[2025-07-01 12:44:43] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-07-01 14:08:13] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 14:08:40] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 14:09:12] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 14:09:29] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 14:09:52] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 14:09:55] [INFO] [routes.endpoints] No endpoints found after graph invocation.
[2025-07-01 14:10:10] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 14:10:50] [INFO] [routes.endpoints] Successfully extracted 8 endpoints.
[2025-07-01 14:11:02] [INFO] [routes.endpoints] Received request to save endpoints
[2025-07-01 14:11:02] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-07-01 14:24:26] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/tiangolo/full-stack-fastapi-postgresql (branch: default)
[2025-07-01 14:25:05] [INFO] [routes.endpoints] Successfully extracted 8 endpoints.
[2025-07-01 14:25:29] [INFO] [routes.endpoints] Received request to save endpoints
[2025-07-01 14:25:29] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/tiangolo/full-stack-fastapi-postgresql
[2025-07-01 14:35:58] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/aksxy007/instagreet-mern (branch: default)
[2025-07-01 14:36:14] [INFO] [routes.endpoints] Successfully extracted 6 endpoints.
[2025-07-01 14:38:19] [INFO] [routes.endpoints] Received request to save endpoints
[2025-07-01 14:38:19] [INFO] [routes.endpoints] Endpoints inserted successfully for repo: https://github.com/aksxy007/instagreet-mern
[2025-07-05 21:00:52] [INFO] [routes.endpoints] Received request to extract endpoints from repo: https://github.com/aksxy007/instagreet-mern (branch: default)
[2025-07-05 21:01:16] [INFO] [routes.endpoints] Successfully extracted 6 endpoints.
[2025-07-05 21:02:07] [INFO] [routes.endpoints] Received request to save endpoints
[2025-07-05 21:02:08] [INFO] [routes.endpoints] Endpoints updated successfully for repo: https://github.com/aksxy007/instagreet-mern
